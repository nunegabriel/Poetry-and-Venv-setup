from typing import Optional
from app.entities import Item
from app.interfaces import ItemInput, ItemOutput
from app.repositories import ItemRepository, CacheRepository

class GetItem:
    def __init__(self, item_repository: ItemRepository, cache_repository: CacheRepository):
        self.item_repository = item_repository
        self.cache_repository = cache_repository

    def __call__(self, item_id: int, use_cache: Optional[bool] = True) -> ItemOutput:
        item_data = self.cache_repository.get_item_by_id(item_id) if use_cache else None
        if item_data:
            return ItemOutput.parse_raw(item_data)
        item = self.item_repository.get_item_by_id(item_id)
        item_output = ItemOutput(id=item.id, name=item.name, price=item.price)
        self.cache_repository.set_item(item_id, item_output.json())
        return item_output

class UpdateItem:
    def __init__(self, item_repository: ItemRepository, cache_repository: CacheRepository):
        self.item_repository = item_repository
        self.cache_repository = cache_repository

    def __call__(self, item_id: int, item_input: ItemInput) -> ItemOutput:
        item
