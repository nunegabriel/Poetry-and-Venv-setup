from typing import Optional
from app.entities import Item
from app.interfaces import ItemInput, ItemOutput
from app.repositories import ItemRepository, CacheRepository

class GetItem:
    def __init__(self, item_repository: ItemRepository, cache_repository: CacheRepository):
        self.item_repository = item_repository
        self.cache_repository = cache_repository

    def __call__(self, item_id: int, use_cache: Optional[bool] = True) -> ItemOutput:
        item_data = self.cache_repository.get_item_by_id(item_id) if use_cache else None
        if item_data:
            return ItemOutput.parse_raw(item_data)
        item = self.item_repository.get_item_by_id(item_id)
        item_output = ItemOutput(id=item.id, name=item.name, price=item.price)
        self.cache_repository.set_item(item_id, item_output.json())
        return item_output

class UpdateItem:
    def __init__(self, item_repository: ItemRepository, cache_repository: CacheRepository):
        self.item_repository = item_repository
        self.cache_repository = cache_repository

    def __call__(self, item_id: int, item_input: ItemInput) -> ItemOutput:
        item
        
        
       @app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item):
    # Update the item in the database
    update_item_in_database(item_id, item)
    # Update the item in the Redis cache
    redis_client.set(f'item:{item_id}', item.json())
    return JSONResponse(content=item.dict())


@app.get("/items/{item_id}")
async def read_item(item_id: int, use_cache: Optional[bool] = True):
    if use_cache:
        # Try to get the item from the Redis cache
        item_data = redis_client.get(f'item:{item_id}')
        if item_data:
            item = Item(**json.loads(item_data))
            return JSONResponse(content=item.dict())
    # If the item is not in the cache, retrieve it from the database and cache it
    item = retrieve_item_from_database(item_id)
    redis_client.set(f'item:{item_id}', item.json())
    return JSONResponse(content=item.dict())


def update_item_in_database(item_id: int, item: Item):
    session = Session()
    item_model = session.query(ItemModel).filter(ItemModel.id == item_id).first()
    item_model.name = item.name
    item_model.price = item.price
    session.commit()
    session.close()


@app.get("/items/{item_id}")
async def read_item(item_id: int, use_cache: Optional[bool] = True):
    if use_cache:
        # Try to get the item from the Redis cache
        item_data = redis_client.get(f'item:{item_id}')
        if item_data:
            item = Item(**json.loads(item_data))
            return JSONResponse(content=item.dict())
    # If the item is not in the cache, retrieve it from the database and cache it
    item = retrieve_item_from_database(item_id)
    redis_client.set(f'item:{item_id}', item.json())
    return JSONResponse(content=item.dict())

